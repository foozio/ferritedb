version: '3.8'

services:
  rustbase:
    build: .
    container_name: rustbase
    restart: unless-stopped
    ports:
      - "8090:8090"
    volumes:
      - rustbase_data:/app/data
      - ./rustbase.toml:/app/rustbase.toml:ro
    environment:
      - RUSTBASE_AUTH_JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - RUSTBASE_DATABASE_URL=sqlite:data/rustbase.db
      - RUSTBASE_STORAGE_BACKEND=local
      - RUST_LOG=${RUST_LOG:-info}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rustbase_network

  # Optional: Reverse proxy with Nginx
  nginx:
    image: nginx:alpine
    container_name: rustbase_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - rustbase
    networks:
      - rustbase_network
    profiles:
      - with-proxy

  # Optional: PostgreSQL for production
  postgres:
    image: postgres:15-alpine
    container_name: rustbase_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=rustbase
      - POSTGRES_USER=rustbase
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rustbase_network
    profiles:
      - with-postgres

  # Optional: Redis for caching/sessions
  redis:
    image: redis:7-alpine
    container_name: rustbase_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_password}
    volumes:
      - redis_data:/data
    networks:
      - rustbase_network
    profiles:
      - with-redis

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: rustbase_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - rustbase_network
    profiles:
      - with-monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rustbase_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - rustbase_network
    profiles:
      - with-monitoring

volumes:
  rustbase_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  rustbase_network:
    driver: bridge